#include "/Engine/Private/Common.ush"

#if INITIALIZE_POSITION_SAMPLE_HORIZ

RWBuffer<float4> PositionBufferA;
RWBuffer<float4> PositionBufferB;
RWBuffer<uint> MaskBuffer;

[numthreads(32, 1, 1)]
void MainCS(uint3 GroupThreadId : SV_GroupThreadID, uint3 ThreadId : SV_DispatchThreadID)
{
    if(ThreadId.x < 2048)
    {
        uint x = ThreadId.x % 32;
        uint y = ThreadId.x / 32;
        PositionBufferA[ThreadId.x] = float4(x * 10.0, y * 10.0, 0.0, 0.0);
        PositionBufferB[ThreadId.x] = float4(x * 10.0, y * 10.0, 0.0, 0.0);
       /* PositionBufferA[ThreadId.x] = float4(x * 10.0, 0, y * 10.0, 0.0);
        PositionBufferB[ThreadId.x] = float4(x * 10.0, 0, y * 10.0, 0.0);*/
    }

    if (ThreadId.x == 0 && GroupThreadId.x == 0) {
        MaskBuffer[0] = 1;
        MaskBuffer[8] = 1;
        MaskBuffer[16] = 1;
        MaskBuffer[24] = 1;
        MaskBuffer[31] = 1;
    }
}

#endif

#if UPDATE_EXTERNAL_FORCE
Buffer<float4> InputPositionBuffer;
Buffer<float4> NormalBuffer;

RWBuffer<float4> OutputPositionBuffer;
RWBuffer<half4> VelocityBuffer;
Buffer<uint> MaskBuffer;

//x: �������ٶȣ�y: DeltaTime
float4 ExternalForceParams;

//xyz: ���� w: ǿ��
float4 WindParams;

[numthreads(32, 1, 1)]
void MainCS(uint3 ThreadId : SV_DispatchThreadID) {
    uint Mask = MaskBuffer[ThreadId.x];

    if (Mask != 1)
    {
        float3 Normal = NormalBuffer[ThreadId.x].xyz;
        float3 Velocity = VelocityBuffer[ThreadId.x].xyz;
        float g = ExternalForceParams.x;
        float DeltaTime = ExternalForceParams.y;
        
        //����
        Velocity.z -= g * DeltaTime;

        //����
        Velocity += abs(dot(WindParams.xyz, Normal)) * WindParams.xyz * WindParams.w * DeltaTime;

        float3 Position = InputPositionBuffer[ThreadId.x].rgb;
        OutputPositionBuffer[ThreadId.x] = float4(Position + Velocity * DeltaTime, 0.0);
        VelocityBuffer[ThreadId.x] = half4(Velocity, 1.0);
    }
}

#endif


#if JACOBI_MASS_SPRING
Buffer<float4> InputPositionBuffer;
Buffer<uint> MaskBuffer;
RWBuffer<float4> OutputPositionBuffer;
RWBuffer<half4> VelocityBuffer;

//x: ����ԭ����y: DeltaTime����
float4 SpringParams;

//-0.5*(||x_i - x_j|| - L) * normalize(x_i - x_j)
void AccumulateSpringProj(inout float3 Acc, float3 PositionA, float3 PositionB, float StaticLength) 
{
    float3 BToA = PositionA - PositionB;
    float Distance = dot(BToA, BToA);
    Distance = sqrt(Distance);
    float3 Dir = BToA / Distance;
    Acc += -0.5 * (Distance - StaticLength) * Dir;
}

[numthreads(32, 1, 1)]
void MainCS(uint3 ThreadId : SV_DispatchThreadID) {
    float3 Position = InputPositionBuffer[ThreadId.x].rgb;
    uint Mask = MaskBuffer[ThreadId.x];

    if (Mask == 1)return;

    float StaticLength = SpringParams.x;

    uint Row = ThreadId.x / 32;
    uint Col = ThreadId.x % 32;

    uint OtherId;
    float3 OtherPosition;
    float3 Acc = 0.0;
    float ProjN = 0.0;

    //up
    if (Row != 0) 
    {
        OtherId = (Row - 1) * 32 + Col;
        OtherPosition = InputPositionBuffer[OtherId].xyz;
        AccumulateSpringProj(Acc, Position, OtherPosition, StaticLength);
        ProjN += 1.0;
    }

    //down
    if (Row != 31) {
        OtherId = (Row + 1) * 32 + Col;
        OtherPosition = InputPositionBuffer[OtherId].xyz;
        AccumulateSpringProj(Acc, Position, OtherPosition, StaticLength);
        ProjN += 1.0;
    }

    //left
    if (Col != 0) {
        OtherId = ThreadId.x - 1;
        OtherPosition = InputPositionBuffer[OtherId].xyz;
        AccumulateSpringProj(Acc, Position, OtherPosition, StaticLength);
        ProjN += 1.0;
    }

    //right
    if (Col != 31) {
        OtherId = ThreadId.x + 1;
        OtherPosition = InputPositionBuffer[OtherId].xyz;
        AccumulateSpringProj(Acc, Position, OtherPosition, StaticLength);
        ProjN += 1.0;
    }

    float3 Transform = Acc / ProjN;

    float3 NewPosition = Position + Transform;
    float3 Velocity = Transform * SpringParams.y;
    OutputPositionBuffer[ThreadId.x] = float4(NewPosition, 1.0);
    VelocityBuffer[ThreadId.x] += float4(Velocity, 1.0);
}
#endif


#if CALC_NORMAL_CROSS_POSITION
Buffer<float4> InputPositionBuffer;
RWBuffer<half4> OutputNormalBuffer;
float4 NormalParams;

[numthreads(32, 1, 1)]
void MainCS(uint3 ThreadId : SV_DispatchThreadID) 
{
    
    float3 Position = InputPositionBuffer[ThreadId.x].xyz;

    uint Row = ThreadId.x / 32;
    uint Col = ThreadId.x % 32;

    uint OtherId;
    float3 Left, Right, Up, Down;

    //up
    if (Row != 0) 
    {
        OtherId = (Row - 1) * 32 + Col;
        Up = InputPositionBuffer[OtherId].xyz;
    }
    else         
    {
        Up = Position;
    }

    //down
    if (Row != 31) 
    {
        OtherId = (Row + 1) * 32 + Col;
        Down = InputPositionBuffer[OtherId].xyz;
    }
    else 
    {
        Down = Position;
    }

    //left
    if (Col != 0) 
    {
        OtherId = ThreadId.x - 1;
        Left = InputPositionBuffer[OtherId].xyz;
    }
    else 
    {
        Left = Position;
    }

    //right
    if (Col != 31) 
    {
        OtherId = ThreadId.x + 1;
        Right = InputPositionBuffer[OtherId].xyz;
    }
    else 
    {
        Right = Position;
    }

    float3 LeftToRight = (Right - Left) * NormalParams.x;
    float3 UpToDown = (Down - Up) * NormalParams.x;
    float3 C = cross(UpToDown, LeftToRight);
    float3 Normal = -normalize(C);
    OutputNormalBuffer[ThreadId.x] = half4(Normal, 1.0);
}

#endif


#if JACOBI_SIMPLE_COLLISION
Buffer<float4> InputPositionBuffer;
Buffer<uint> MaskBuffer;
RWBuffer<float4> OutputPositionBuffer;
RWBuffer<half4> VelocityBuffer;

//x: ����ԭ����y: DeltaTime����
float4 SpringParams;

//xyz: �������� z: �뾶
float4 SphereCollisionParams;

//-0.5*(||x_i - x_j|| - L) * normalize(x_i - x_j)
void AccumulateSpringProj(inout float3 Acc, float3 PositionA, float3 PositionB, float StaticLength) {
    float3 BToA = PositionA - PositionB;
    float Distance = dot(BToA, BToA);
    Distance = sqrt(Distance);
    float3 Dir = BToA / Distance;
    Acc += -0.5 * (Distance - StaticLength) * Dir;
}



[numthreads(32, 1, 1)]
void MainCS(uint3 ThreadId : SV_DispatchThreadID) {
    float3 Position = InputPositionBuffer[ThreadId.x].rgb;
    uint Mask = MaskBuffer[ThreadId.x];

    if (Mask == 1)return;

    float StaticLength = SpringParams.x;

    uint Row = ThreadId.x / 32;
    uint Col = ThreadId.x % 32;

    uint OtherId;
    float3 OtherPosition;
    float3 Acc = 0.0;
    float ProjN = 0.0;

    //up
    if (Row != 0) {
        OtherId = (Row - 1) * 32 + Col;
        OtherPosition = InputPositionBuffer[OtherId].xyz;
        AccumulateSpringProj(Acc, Position, OtherPosition, StaticLength);
        ProjN += 1.0;
    }

    //down
    if (Row != 31) {
        OtherId = (Row + 1) * 32 + Col;
        OtherPosition = InputPositionBuffer[OtherId].xyz;
        AccumulateSpringProj(Acc, Position, OtherPosition, StaticLength);
        ProjN += 1.0;
    }

    //left
    if (Col != 0) {
        OtherId = ThreadId.x - 1;
        OtherPosition = InputPositionBuffer[OtherId].xyz;
        AccumulateSpringProj(Acc, Position, OtherPosition, StaticLength);
        ProjN += 1.0;
    }

    //right
    if (Col != 31) {
        OtherId = ThreadId.x + 1;
        OtherPosition = InputPositionBuffer[OtherId].xyz;
        AccumulateSpringProj(Acc, Position, OtherPosition, StaticLength);
        ProjN += 1.0;
    }

    // ------------------------ ��ײ ----------------------
    float SphereRadius = SphereCollisionParams.w;
    float3 SphereCenter = SphereCollisionParams.xyz;
    float3 CenterToPosition = Position - SphereCenter;
    float DistSqr = dot(CenterToPosition, CenterToPosition);
    
    //������
    if (DistSqr < SphereRadius * SphereRadius)
    {
        float3 Normal = CenterToPosition * rsqrt(DistSqr);
        float3 Offset = SphereCenter + Normal * SphereRadius - Position;
        Acc = Offset;
        ProjN = 1.0;
    }
    
    // ------------------------ ���� ----------------------
    float3 Transform = Acc / ProjN;

    float3 NewPosition = Position + Transform;
    float3 Velocity = Transform * SpringParams.y;
    OutputPositionBuffer[ThreadId.x] = float4(NewPosition, 1.0);
    VelocityBuffer[ThreadId.x] += float4(Velocity, 1.0);
}
#endif


#if JACOBI_SIMPLE_COLLISION_FEEDBACK

#ifndef THREAD_COUNT
#define THREAD_COUNT 32
#endif // !THREAD_COUNT


Buffer<float4> InputPositionBuffer;
Buffer<uint> MaskBuffer;
RWBuffer<float4> OutputPositionBuffer;
RWBuffer<half4> VelocityBuffer;


RWBuffer<half4> FeedbackBuffer;
RWBuffer<uint> FeedbackBufferSizes;

groupshared uint GroupWriteOffsets[2 * THREAD_COUNT];

groupshared uint GroupWriteStart;

//x: ����ԭ����y: DeltaTime����
float4 SpringParams;

//xyz: �������� z: �뾶
float4 SphereCollisionParams;

//-0.5*(||x_i - x_j|| - L) * normalize(x_i - x_j)
void AccumulateSpringProj(inout float3 Acc, float3 PositionA, float3 PositionB, float StaticLength) {
    float3 BToA = PositionA - PositionB;
    float Distance = dot(BToA, BToA);
    Distance = sqrt(Distance);
    float3 Dir = BToA / Distance;
    Acc += -0.5 * (Distance - StaticLength) * Dir;
}



[numthreads(THREAD_COUNT, 1, 1)]
void MainCS(uint3 GroupThreadId : SV_GroupThreadID, uint3 ThreadId : SV_DispatchThreadID) {
    float3 Position = InputPositionBuffer[ThreadId.x].rgb;
    uint Mask = MaskBuffer[ThreadId.x];

    

    float StaticLength = SpringParams.x;

    uint Row = ThreadId.x / 32;
    uint Col = ThreadId.x % 32;

    uint OtherId;
    float3 OtherPosition;
    float3 Acc = 0.0;
    float ProjN = 0.0;

    //up
    if (Row != 0) {
        OtherId = (Row - 1) * 32 + Col;
        OtherPosition = InputPositionBuffer[OtherId].xyz;
        AccumulateSpringProj(Acc, Position, OtherPosition, StaticLength);
        ProjN += 1.0;
    }

    //down
    if (Row != 31) {
        OtherId = (Row + 1) * 32 + Col;
        OtherPosition = InputPositionBuffer[OtherId].xyz;
        AccumulateSpringProj(Acc, Position, OtherPosition, StaticLength);
        ProjN += 1.0;
    }

    //left
    if (Col != 0) {
        OtherId = ThreadId.x - 1;
        OtherPosition = InputPositionBuffer[OtherId].xyz;
        AccumulateSpringProj(Acc, Position, OtherPosition, StaticLength);
        ProjN += 1.0;
    }

    //right
    if (Col != 31) {
        OtherId = ThreadId.x + 1;
        OtherPosition = InputPositionBuffer[OtherId].xyz;
        AccumulateSpringProj(Acc, Position, OtherPosition, StaticLength);
        ProjN += 1.0;
    }

    // ------------------------ ��ײ ----------------------
    float SphereRadius = SphereCollisionParams.w;
    float3 SphereCenter = SphereCollisionParams.xyz;
    float3 CenterToPosition = Position - SphereCenter;
    float DistSqr = dot(CenterToPosition, CenterToPosition);
    uint bIsCollis = 0;

    float3 Normal = 0;
    //������
    if (DistSqr < SphereRadius * SphereRadius) {
        Normal = CenterToPosition * rsqrt(DistSqr);
        float3 Offset = SphereCenter + Normal * SphereRadius - Position;
        Acc = Offset;
        ProjN = 1.0;
        bIsCollis = 1;
    }

    if (Mask == 1) bIsCollis = 0;

    // ------------------------ ��Լ ----------------------
    uint Thread = GroupThreadId.x;
    GroupWriteOffsets[Thread] = bIsCollis;
    GroupMemoryBarrierWithGroupSync();

    int OutBuffer = 0, InBuffer = 1;

    [unroll]
    for (uint Offset = 1; Offset < THREAD_COUNT; Offset = Offset << 1) {

        OutBuffer = 1 - OutBuffer;
        InBuffer = 1 - InBuffer;
        if (Thread >= Offset) {
            GroupWriteOffsets[OutBuffer * THREAD_COUNT + Thread] = GroupWriteOffsets[InBuffer * THREAD_COUNT + Thread - Offset] + GroupWriteOffsets[InBuffer * THREAD_COUNT + Thread];
        }
        else {
            GroupWriteOffsets[OutBuffer * THREAD_COUNT + Thread] = GroupWriteOffsets[InBuffer * THREAD_COUNT + Thread];
        }

        GroupMemoryBarrierWithGroupSync();
    }

    if (Thread == 0) {
        uint NumGroupFreeIDs = GroupWriteOffsets[(OutBuffer + 1) * THREAD_COUNT - 1];
        InterlockedAdd(FeedbackBufferSizes[0], NumGroupFreeIDs, GroupWriteStart);
    }

    GroupMemoryBarrierWithGroupSync();

    if (bIsCollis) 
    {
        uint WriteOffset = GroupWriteStart + GroupWriteOffsets[OutBuffer * THREAD_COUNT + Thread] - bIsCollis;
        FeedbackBuffer[WriteOffset] = half4(-Normal, 1.0);
    }
    
    if (Mask == 1) return;
    // ------------------------ ���� ----------------------
    float3 Transform = Acc / ProjN;

    float3 NewPosition = Position + Transform;
    float3 Velocity = Transform * SpringParams.y;
    OutputPositionBuffer[ThreadId.x] = float4(NewPosition, 1.0);
    VelocityBuffer[ThreadId.x] += float4(Velocity, 1.0);
}
#endif



#if INITIALIZE_CLOTH_INDEX_BUFFER

#ifndef THREAD_COUNT
#define THREAD_COUNT 32
#endif // !THREAD_COUNT

RWBuffer<uint> IndexBuffer;

[numthreads(THREAD_COUNT, 1, 1)]
void MainCS(uint3 GroupThreadId : SV_GroupThreadID, uint3 ThreadId : SV_DispatchThreadID)
{
    uint VertexIndex = ThreadId.x;
    uint RectVertex[6] = {0, 1, 32, 1, 33, 32};
	uint IndexInRect = VertexIndex % 6;
	uint RectIndex = VertexIndex / 6;
	
	uint Col = RectIndex % 31;
	uint Row = RectIndex / 31;

	uint BufferIndex = RectVertex[IndexInRect] + RectIndex + Row;

    IndexBuffer[VertexIndex] = BufferIndex;
}

#endif