#define YQ_PHYSICS_CUSTOM_VS_IN_EDITOR 1

#ifdef VF_YQ_PHYSICS

struct FVertexFactoryInput
{
	uint VertexId : SV_VertexID;

	float4	Position	: ATTRIBUTE0;

	#if METAL_PROFILE
		float3	TangentX	: ATTRIBUTE1;
		// TangentZ.w contains sign of tangent basis determinant
		float4	TangentZ	: ATTRIBUTE2;

	#else
		HALF3_TYPE	TangentX	: ATTRIBUTE1;
		// TangentZ.w contains sign of tangent basis determinant
		HALF4_TYPE	TangentZ	: ATTRIBUTE2;

	#endif

	float2	TexCoords0 : ATTRIBUTE3;
};

struct FVertexFactoryIntermediates
{
	float3 Position;
	half3 Normal;
	float4 TexCoords;

};

uint GetVertexIndex(in FVertexFactoryInput Input)
{
	return Input.VertexId + YQPhysicsVF.YQPhysicsVertexOffset;
}



Buffer<float4> PositionBuffer;
Buffer<half4> NormalBuffer;

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;
	Intermediates = (FVertexFactoryIntermediates)0;

	uint VertexIndex = GetVertexIndex(Input);

	uint IndexInRect = VertexIndex % 6;
	uint RectIndex = VertexIndex / 6;
	
	uint Col = RectIndex % 31;
	uint Row = RectIndex / 31;

	uint BufferIndex = VertexIndex;

	float3 Position = PositionBuffer[BufferIndex].xyz;
	float3 Normal = NormalBuffer[BufferIndex].xyz;

	Intermediates.Position = Position;
	Intermediates.Normal = Input.TangentZ.xyz;


	float2 UV = 0.0;
	
	Intermediates.TexCoords.xy = Input.TexCoords0;

	//��Ϊ�õ���float4������ʼ���Ļ�����
	Intermediates.TexCoords.zw = 0;

	return Intermediates;
}

#endif