#include "/Engine/Private/Common.ush"
#include "/Engine/Private/VertexFactoryCommon.ush"
#include "/Engine/Generated/UniformBuffers/View.ush"

#include "PhysicsParticleCommon.ush"

void TestViewExtPS(
    out float4 OutColor : SV_Target0
)
{
    OutColor = float4(10.0, 0.0, 0.0, 0.0);
}

#if COMPILE_VISUALIZE_BVH_VS

Buffer<float4> LeafBVBuffer0;
Buffer<float2> LeafBVBuffer1;

Buffer<float4> InternalNodeBVBuffer0;
Buffer<float2> InternalNodeBVBuffer1;

Buffer<uint> VisualizeNodeIDBuffer;

void TestViewExtVS(
    in uint VertexId : SV_VertexID
    , in uint InstanceId : SV_InstanceID
    , out float4 Position : SV_POSITION
)
{
    ResolvedView = ResolveView();

    // 立方体

    const uint VertexToPoint[24] = {
        0, 1, 0, 2, 1, 3, 2, 3,
        4, 5, 4, 6, 5, 7, 6, 7,
        0, 4, 1, 5, 2, 6, 3, 7
    };

    const float3 VertexPosition[8] = {
        float3(0.0, 0.0, 0.0),
        float3(0.0, 0.0, 1.0),
        float3(1.0, 0.0, 0.0),
        float3(1.0, 0.0, 1.0),
        float3(0.0, 1.0, 0.0),
        float3(0.0, 1.0, 1.0),
        float3(1.0, 1.0, 0.0),
        float3(1.0, 1.0, 1.0)
    };

    float3 CamPos = LWCToFloat(ResolvedView.PreViewTranslation);
    float3 WorldPos = VertexPosition[VertexToPoint[VertexId]];

    // 读取BV

    uint NodeID = VisualizeNodeIDBuffer[InstanceId + 1];
    
    float4 BVVal0;
    float2 BVVal1;

    // 如果是叶子节点
    if ((NodeID & BITMASK_BVH_CHILD_TYPE) == BITMASK_BVH_CHILD_TYPE) 
    {
        uint IDBitmask = ~(BITMASK_BVH_CHILD_TYPE);
        NodeID = NodeID & IDBitmask;

        BVVal0 = LeafBVBuffer0[NodeID];
        BVVal1 = LeafBVBuffer1[NodeID];
    }
    else 
    {
        BVVal0 = InternalNodeBVBuffer0[NodeID];
        BVVal1 = InternalNodeBVBuffer1[NodeID];
    }

    float3 MinPosition = BVVal0.xyz;
    float3 MaxPosition = float3(BVVal1.x, BVVal1.y, BVVal0.w);

    float3 Scale = MaxPosition - MinPosition;
    //Scale = float3(10, 10, 10);
    WorldPos *= Scale;

    WorldPos += MinPosition;

    float3 TranslatedWorldPos = WorldPos + CamPos;
    Position = mul(float4(TranslatedWorldPos, 1.0), ResolvedView.TranslatedWorldToClip);

}


#endif


#if COMPILE_SINGLE_LAYER_BV

Buffer<uint> BVHChildIDBuffer;
Buffer<uint> PhysicsSceneViewBuffer;
RWBuffer<uint> VisualizeNodeIDBuffer;

uint LayerIndex;
uint Length;

groupshared uint GroupWriteOffsets[2 * THREAD_COUNT];
groupshared uint GroupWriteStart;

[numthreads(THREAD_COUNT, 1, 1)]
void MainCS(uint3 GroupThreadId : SV_GroupThreadID, uint3 ThreadId : SV_DispatchThreadID) {
    uint Index = ThreadId.x;

    uint IsValid = 1;
    uint CurrentNode = -1;
    
    if (Index < Length) 
    {
        //uint RootIndex = PhysicsSceneViewBuffer[0];
        uint RootIndex = 0;
        CurrentNode = RootIndex;

        if (LayerIndex != 0) 
        {
            // ---------- 遍历BVH ---------------
            // 获得左右的顺序
            uint Bitmask = 1 << (LayerIndex - 1);

            for (int i = 0; i < LayerIndex; i++) {
                // 判断当前节点是不是叶子节点
                if ((CurrentNode & BITMASK_BVH_CHILD_TYPE) == BITMASK_BVH_CHILD_TYPE) {
                    // 如果是叶子节点，说明还没到达LayerIndex层，就已经到底
                    IsValid = 0;
                    break;
                }

                // 判断读取左还是右
                uint Offset = (Index & Bitmask) == 0 ? 0 : 1;

                CurrentNode = BVHChildIDBuffer[CurrentNode * 2 + Offset];

                Bitmask >>= 1;
            }
        }
    }
    else         
    {
        IsValid = 0;
    }

    

    // --------------- 归约求和，得到线程组总共的有效输出个数 --------------- 
    uint Thread = GroupThreadId.x;
    GroupWriteOffsets[Thread] = IsValid;
    GroupMemoryBarrierWithGroupSync();

    int OutBuffer = 0, InBuffer = 1;

    [unroll]
    for (uint Offset = 1; Offset < THREAD_COUNT; Offset = Offset << 1) 
    {
        OutBuffer = 1 - OutBuffer;
        InBuffer = 1 - InBuffer;
        if (Thread >= Offset) 
        {
            GroupWriteOffsets[OutBuffer * THREAD_COUNT + Thread] = GroupWriteOffsets[InBuffer * THREAD_COUNT + Thread - Offset] + GroupWriteOffsets[InBuffer * THREAD_COUNT + Thread];
        }
        else 
        {
            GroupWriteOffsets[OutBuffer * THREAD_COUNT + Thread] = GroupWriteOffsets[InBuffer * THREAD_COUNT + Thread];
        }

        GroupMemoryBarrierWithGroupSync();
    }

    if (Thread == 0) 
    {
        uint NumGroupFreeIDs = GroupWriteOffsets[(OutBuffer + 1) * THREAD_COUNT - 1];
        InterlockedAdd(VisualizeNodeIDBuffer[0], NumGroupFreeIDs, GroupWriteStart);
    }

    GroupMemoryBarrierWithGroupSync();

    if (IsValid)
    {
        uint WriteOffset = GroupWriteStart + GroupWriteOffsets[OutBuffer * THREAD_COUNT + Thread] - IsValid + 1;
        VisualizeNodeIDBuffer[WriteOffset] = CurrentNode;
    }

}

#endif


#if COMPILE_VISUALIZE_INDIRECT_ARG

Buffer<uint> VisualizeNodeIDBuffer;
RWBuffer<uint> IndirectArgBuffer;

[numthreads(THREAD_COUNT, 1, 1)]
void MainCS(uint3 GroupThreadId : SV_GroupThreadID, uint3 ThreadId : SV_DispatchThreadID) 
{
    uint Index = ThreadId.x;

    if (Index == 0)         
    {
        IndirectArgBuffer[0] = 24;
        IndirectArgBuffer[1] = VisualizeNodeIDBuffer[0];
        IndirectArgBuffer[2] = VisualizeNodeIDBuffer[0];
    }
}

#endif

#if COMPILE_CLEAR_VISUALIZE_BVH_BUFFER

RWBuffer<uint> VisualizeNodeIDBuffer;

[numthreads(THREAD_COUNT, 1, 1)]
void MainCS(uint3 GroupThreadId : SV_GroupThreadID, uint3 ThreadId : SV_DispatchThreadID) {
    uint Index = ThreadId.x;

    if (Index == 0) {
        VisualizeNodeIDBuffer[0] = 0;
    }
}

#endif