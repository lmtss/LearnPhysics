#include "/Engine/Private/Common.ush"

Buffer<int> IDToIndexTable;

RWBuffer<uint> RWFreeIDList;

RWBuffer<uint> RWFreeIDListSizes;

uint FreeIDListIndex;



#if USE_RAKING

#ifndef COUNTER_PER_THREAD
#define COUNTER_PER_THREAD 8
#endif

groupshared uint GroupWriteOffsets[2 * THREAD_COUNT];

groupshared uint GroupWriteStart;

[numthreads(THREAD_COUNT, 1, 1)]
void MainCS(uint3 GroupId : SV_GroupID, uint3 GroupThreadId : SV_GroupThreadID, uint3 DispatchThreadId : SV_DispatchThreadID) {
	uint InputStart = GroupId.x * THREAD_COUNT;
	uint Thread = GroupThreadId.x;
	uint ParticleID = (InputStart + Thread) * COUNTER_PER_THREAD;

	int OutBuffer = 0, InBuffer = 1;

	uint IsFreeArray[COUNTER_PER_THREAD];
	uint NumFreeInThread = 0;

	[unroll]
	for (uint i = 0; i < COUNTER_PER_THREAD; i++) 
	{
		uint IsFree = IDToIndexTable[ParticleID + i] == -1 ? 1 : 0;
		IsFreeArray[i] = IsFree;
		NumFreeInThread += IsFree;
	}

	GroupWriteOffsets[Thread] = NumFreeInThread;

	GroupMemoryBarrierWithGroupSync();

	[unroll]
	for (uint Offset = 1; Offset < THREAD_COUNT; Offset = Offset << 1) {

		OutBuffer = 1 - OutBuffer;
		InBuffer = 1 - InBuffer;
		if (Thread >= Offset) {
			GroupWriteOffsets[OutBuffer * THREAD_COUNT + Thread] = GroupWriteOffsets[InBuffer * THREAD_COUNT + Thread - Offset] + GroupWriteOffsets[InBuffer * THREAD_COUNT + Thread];
		}
		else {
			GroupWriteOffsets[OutBuffer * THREAD_COUNT + Thread] = GroupWriteOffsets[InBuffer * THREAD_COUNT + Thread];
		}

		GroupMemoryBarrierWithGroupSync();
	}

	if (Thread == 0) 
	{
		uint NumGroupFreeIDs = GroupWriteOffsets[(OutBuffer + 1) * THREAD_COUNT - 1];
		InterlockedAdd(RWFreeIDListSizes[FreeIDListIndex], NumGroupFreeIDs, GroupWriteStart);
	}

	GroupMemoryBarrierWithGroupSync();

	uint WriteOffset = GroupWriteStart + GroupWriteOffsets[OutBuffer * THREAD_COUNT + Thread] - NumFreeInThread;
	uint OffsetInThread = 0;

	[unroll]
	for (uint i = 0; i < COUNTER_PER_THREAD; i++)
	{
		uint IsFree = IsFreeArray[i];

		if (IsFree) 
		{
			OffsetInThread++;
			RWFreeIDList[WriteOffset + OffsetInThread] = ParticleID + i;
		}

	}
}
#else

groupshared uint GroupWriteOffsets[2 * THREAD_COUNT];

groupshared uint GroupWriteStart;

[numthreads(THREAD_COUNT, 1, 1)]
void MainCS(uint3 GroupId : SV_GroupID, uint3 GroupThreadId : SV_GroupThreadID, uint3 DispatchThreadId : SV_DispatchThreadID) {
	uint InputStart = GroupId.x * THREAD_COUNT;
	uint Thread = GroupThreadId.x;
	uint ParticleID = InputStart + Thread;

	int OutBuffer = 0, InBuffer = 1;

	if (Thread > 0) {
		uint IsFree = (IDToIndexTable[ParticleID - 1] == -1) ? 1 : 0;
		GroupWriteOffsets[Thread] = IsFree;
	}
	else {
		GroupWriteOffsets[0] = 0;
	}
	GroupMemoryBarrierWithGroupSync();

	[unroll]
	for (uint Offset = 1; Offset < THREAD_COUNT; Offset = Offset << 1) {

		OutBuffer = 1 - OutBuffer;
		InBuffer = 1 - InBuffer;
		if (Thread >= Offset) {
			GroupWriteOffsets[OutBuffer * THREAD_COUNT + Thread] = GroupWriteOffsets[InBuffer * THREAD_COUNT + Thread - Offset] + GroupWriteOffsets[InBuffer * THREAD_COUNT + Thread];
		}
		else {
			GroupWriteOffsets[OutBuffer * THREAD_COUNT + Thread] = GroupWriteOffsets[InBuffer * THREAD_COUNT + Thread];
		}
		GroupMemoryBarrierWithGroupSync();
	}

	if (Thread == 0) {
		uint LastIsFree = (IDToIndexTable[InputStart + THREAD_COUNT - 1] == -1) ? 1 : 0;
		uint NumGroupFreeIDs = GroupWriteOffsets[(OutBuffer + 1) * THREAD_COUNT - 1] + LastIsFree;
		InterlockedAdd(RWFreeIDListSizes[FreeIDListIndex], NumGroupFreeIDs, GroupWriteStart);
	}
	GroupMemoryBarrierWithGroupSync();

	if (IDToIndexTable[ParticleID] == -1) {
		uint WriteOffset = GroupWriteStart + GroupWriteOffsets[OutBuffer * THREAD_COUNT + Thread];
		RWFreeIDList[WriteOffset] = ParticleID;
	}
}
#endif





