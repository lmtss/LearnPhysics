#include "/Engine/Private/Common.ush"
#include "PhysicsParticleCommon.ush"


#if SOLVE_EXTERNAL_FORCE
Buffer<float4> InputPositionBuffer;
RWBuffer<float4> OutputPositionBuffer;
RWBuffer<half4> VelocityBuffer;
Buffer<uint> MaskBuffer;

#if USE_SIMPLE_DIRECTIONAL_WIND
Buffer<half4> NormalBuffer;
#endif

float4 ExternalForceParams;

float4 WindParams;

uint NumParticles;
uint OffsetParticles;

[numthreads(THREAD_COUNT, 1, 1)]
void MainCS(uint3 ThreadId : SV_DispatchThreadID)
{
    if (ThreadId.x >= NumParticles)return;

    uint ParticleID = OffsetParticles + ThreadId.x;

    uint Mask = MaskBuffer[ParticleID];
    uint IsFixed = IsParticleFixed(Mask);

    if (IsFixed == 0)
    {
        float3 Velocity = VelocityBuffer[ParticleID].xyz;
        float g = ExternalForceParams.x;
        float DeltaTime = ExternalForceParams.y;

#if USE_SIMPLE_DIRECTIONAL_WIND
        float3 Normal = NormalBuffer[ParticleID].xyz;
        Velocity += abs(dot(WindParams.xyz, Normal)) * WindParams.xyz * WindParams.w * DeltaTime;
#endif
        

        float3 Position = InputPositionBuffer[ParticleID].rgb;
        OutputPositionBuffer[ParticleID] = float4(Position + Velocity * DeltaTime, 0.0);

        Velocity *= 0.95;
        Velocity.z -= g * DeltaTime;
        
        Velocity = clamp(Velocity, -MAX_SPEED_LIMIT, MAX_SPEED_LIMIT);

        VelocityBuffer[ParticleID] = half4(Velocity, 1.0);
    }
    else
    {
        OutputPositionBuffer[ParticleID] = InputPositionBuffer[ParticleID];
        VelocityBuffer[ParticleID] = half4(0, 0, 0, 1.0);
    }
}

#endif


#if UPDATE_FIXED_PARTICLES_TRANSFORM


RWBuffer<float4> PositionBuffer;
Buffer<uint> MaskBuffer;

uint NumParticles;
uint BaseParticle;

float4x4 PreviousWorldToLocal;
float4x4 NewLocalToWorld;

[numthreads(THREAD_COUNT, 1, 1)]
void MainCS(uint3 ThreadId : SV_DispatchThreadID)
{
    if (ThreadId.x >= NumParticles)return;

    uint ParticleID = ThreadId.x + BaseParticle;
    uint Mask = MaskBuffer[ParticleID];
    uint IsFixed = IsParticleFixed(Mask);

    if (IsFixed == 1)
    {
        float3 PreviousWorldPosition = PositionBuffer[ParticleID].xyz;
        float4 LocalPosition = mul(float4(PreviousWorldPosition, 1.0), PreviousWorldToLocal);
        float4 WorldPosition = mul(float4(LocalPosition.xyz, 1.0), NewLocalToWorld);

        PositionBuffer[ParticleID] = WorldPosition;
    }
}

#endif